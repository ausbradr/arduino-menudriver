// MENU DRIVER For Arduino Uno
// by Brad Rogers, 8th March 2021

// The purpose of this code is to demonstrate how a menu would be coded on an arduino, with a few inexpensive components. 
// I've put plenty of comments, and made extensive use of the seral monitor so that you may know how the program is flowing. Notmally you'd clean these up when copying / pasting into your own projects.

// GETTING STARTED:
// So, we're going to assume you know about the serial monitor, and I2C 1602 LCDs. If you don't google them. There's plenty of single purpose projects to show you how these are used. 
// You should also be familiar with how we wire up arduinos, why we use pulldown resistors, why resistors are used on speakers/LEDS, what is a single tone buzzer?
// If you're unsure, check out reddit / forums. Get up to speed, have a play with some existing code. Because we're going to gloss over such finer details. We're all about code flow here today!!

//INGREDIENTS:
// You'll need:
// 1x Arduino Uno
// 1x regular 8 ohm loud speaker and a 100 ohm resistor
// 1x Piezo buzzer. To know it's the right one, it's the sort that makes a loude tone when you apply just 5VDC to it. 
// 1x LED and a 330 ohm resistor
// 4x push buttons, spst, normally open, and 4x 10k resistors to hook them up
// 1x 1602 LCD display and I2C backpack. If you look hard enough, you'll find 1602 LCDs with native I2C 1602s for a couple bucks on AliExpress

// Wire it all up according to the attached diagram on GitHub, upload this code to your Uno, and enjoy!

// WHAT'S THE DIFFIERENCE BETWEEN A PIEZO BUZZER AND A SPEAKER?
// A Buzzer will typically make noise when 5 volts is applied to it, it makes one tone only, so nothing musical is allowed. 
// A speaker will be wired up with a resistor in series to not damage the pin it's attached to (speakers have a low resistance, usually), and that pin won't just spit out 5VDC, we use the tone command to oscillate that pin. It can be used to play music.
// We've included both methods that you can use as you please. 
// routines such as acceptbeep() use the buzzer to make a nice accepting beep for things that went OK.
// Other routines use the speaker, such as keytone(), limittone(), fancytoneA(), and failtoneA() and these are used extensively.
// These tones don't matter so much, I just love audible feedback, and I want to show you how you can use both devices to achieve it. 


//Let's setup the 1602 LCD via I2C:
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2); // set the LCD address to 0x27 for a 16 chars and 2 line display

//Let's select the pin we'll use for the single tone buzzer:
int buzzer = 12; //the pin of the active buzzer

//Let's select the pin we'll use for the loudspeaker:
int tonePin = 8;

//Let's select the pin we'll use for the LED:
int LedPin = 9;

//4buttonscan prerequisites
//Set the pins we'll be using for all 4 buttons
//The way the buttons work is a routine clears keypadtotal to zero, assigns an independent value to each button (as shown in the below line), and uses those values to determine keys pressed.
//Buttons: A=Up (10), B=Down(50), C=Softkey Left(100), D=Softkey Right(200)
//holding multiple buttons adds values, so you can use these added values in keypadtotal to determine multi presses. (ie, holding up and down at the same time will read 60). 
int buttonA = 2;
int buttonB = 3;
int buttonC = 4;
int buttonD = 5;
//Define the variables used to store whether each button is pressed
int buttonAstate=0;
int buttonBstate=0;
int buttonCstate=0;
int buttonDstate=0;
//define the variable and zero it, for keypad total. This will help us indicate simultaneous keypresses, if your program is looking for that.
int keypadtotal=0;


//For the sake of the config demo, let's define some variables for it. 
int happy = 128; //initial value for parameter "happiness"
int happymin = 0; // the lowest it can go
int happymax = 255; // the highest it can go
int happybuffer = 0; //define the variable for a temp value to be placed, during it's config page

int intens = 96; //initial value for parameter "intensity"
int intensmin = 0; // the lowest it can go
int intensmax = 255; // the highest it can go
int intensbuffer = 0; //define the variable for a temp value to be placed, during it's config page





// OK, on with the regular arduino stuff. 
void setup() {
  // put your setup code here, to run once:
//allow serial debug, this lets us monitor what is going on. 
  Serial.begin(9600);


//LCD init:
lcd.init(); // initialize the lcd

//Buzzer Stuff:
  pinMode(buzzer, OUTPUT); //initialize the buzzer pin as an output

//LED Stuff:
pinMode(LedPin, OUTPUT); // declare LED pins as output


//Initial setup indicators and such:
acceptbeep(); //Let's test the buzzer
delay (1000); //wait a second
tone(tonePin, 196, 1000); //A welcome tone to indicate startup OK. Like an old mobile phone.

//4buttonscan void setup lines:
//For the pins we're connecting the buttons to, we need to define them as inputs:
pinMode(buttonA, INPUT);
pinMode(buttonB, INPUT);
pinMode(buttonC, INPUT);
pinMode(buttonD, INPUT);



//Let's test the LCD
lcd.backlight(); // Turn backlight On
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("ABCDEFGHIJKLMNOP"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("QRSTUVWXYZ012345"); // Second line of LCD


delay (2000); //Wait a bit before starting the loop. Not that we need to. We're just slowly showing how things are done here.

//clear the display for the loop code to run:
lcd.clear();

}














// Now to the meat of the program:
void loop() {
//This is a basic menu layout:

// home screen -> Menu -> Information (tests the buttons)
                    //|
                    //|-> LED Flasher
                    //|-> chiptune (plays a short chiptune song
                    //|-> config (adjusts numbers in variables, for showing how up/down keys are also used to bump up/down numbers). -> Happiness Level Up/Down
                                                                                                                                   //-> Intensity Level Up/Down

// YOU WILL FIND GREAT VALUE IN GETTING A PIECE OF PAPER, AND DRAWING A MENU DIAGRAM FROM SCRATCH, AND LABEL EACH SCREEN WITH IT'S RELEVENT LABEL (like startprog:, etc).                                                                                                                                    



//This is the home screen. If you wished to achieve any multitasking here, you could write a customloop that interrogates the buttons with keypadcheckonce()
startprog:
lcd.clear();
Serial.println("drawing home screen");

lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("Menu Demo"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("MENU            "); // Second line of LCD

//check the keypad
homewait:
keypadcheckloop();
keytone();
Serial.println(keypadtotal);

//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("detected button 1");failtoneA();//The reason we're using a "fail tone" here is because the button isn't required at this page. It's nice to let the user know this. 
}

if (keypadtotal == 50) {
  delay(200);Serial.println("detected button 2");failtoneA();
}

if (keypadtotal == 100) {
  delay(200);Serial.println("detected button 3");goto entermenu;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("detected button 4");failtoneA();
}
goto homewait;

//drawing / control of main menu starts here
entermenu:
Serial.println("entering main menu");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("  Information   "); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    EXIT"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto mainmenuconfig;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto mainmenuled;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto infopage;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto startprog;
}

goto entermenu;
//main menu ends here



infopage:
Serial.println("Entering info page");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("Btn  A0 B0 C0 D0"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("BOTH S-KEYS EXIT"); // Second line of LCD
delay(100);

updatekeyinfo:
keypadcheckonce();

//test the keypad results, and update the LCD here
if (keypadtotal == 10) {
  lcd.setCursor(6, 0);lcd.print("1"); 
}

if (keypadtotal == 50) {
  lcd.setCursor(9, 0);lcd.print("1"); 
}

if (keypadtotal == 100) {
  lcd.setCursor(12, 0);lcd.print("1"); 
}

if (keypadtotal == 200) {
  lcd.setCursor(15, 0);lcd.print("1"); 
}

if (keypadtotal == 300) {
  fancytoneA();delay(100);goto entermenu; 
}


if (keypadtotal == 0) {
  goto infopage; 
}



goto updatekeyinfo;



mainmenuconfig:// This is the main menu option for settings
Serial.println("entering main menu, showing config");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print(" Configuration"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    EXIT"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto mainmenuchiptune;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto entermenu;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto configmenu;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto startprog;
}

goto mainmenuconfig;











mainmenuled: //This is the main menu option for LED flash
Serial.println("entering main menu, showing led flasher");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("  LED Flasher"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    EXIT"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto entermenu;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto mainmenuchiptune;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto ledflasher;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto startprog;
}

goto mainmenuled;














mainmenuchiptune: // This is the main menu for chiptune demo
Serial.println("entering main menu, showing chiptune");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("    Chiptune    "); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    EXIT"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto mainmenuled;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto mainmenuconfig;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto chiptunedemo;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto startprog;
}

goto mainmenuchiptune;






//Okay, now we're done with all the items that sit in the root main menu
//Now let's write things that go in the configuration menu
//At this point you can basically see that adding menus is as easy as copying a bunch of lcd commands / if statements, pasting them, and tweaking them. 

// and some things that sit within the config menu:

configmenu: //The config menu
Serial.println("entering config menu showing happiness");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print(" Set Happiness"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    BACK"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto configmenuintens;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto configmenuintens;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto happymenu;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto mainmenuconfig;
}

goto configmenu;







configmenuintens:
Serial.println("entering config menu, showing intensity");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print(" Set Intensity"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    BACK"); // Second line of LCD

keypadcheckloop();
keytone();
delay(50);
//test the keypad results
if (keypadtotal == 10) {
  delay(200);Serial.println("Up");goto configmenu;
}

if (keypadtotal == 50) {
  delay(200);Serial.println("Down");goto configmenu;
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");goto intensmenu;
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto mainmenuconfig;
}

goto configmenuintens;
Serial.println("entering menu");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print(" Set Intensity"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    BACK"); // Second line of LCD - By this stage, if you're using OK <> Back a lot, you could probably subroutine this out to save space in a tight program. 







//This is how a settings adjust dialog would appear, use up/down arrows to adjust, softkey OK to save changes, softkey back to abandon changes. 
happymenu:
Serial.println("entering happy config");
happybuffer = happy;

happycore:
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("Happy: "); // First line of LCD
lcd.setCursor(8, 0);lcd.print(happybuffer); //let's add the value
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    BACK"); // Second line of LCD - By this stage, if you're using OK <> Back a lot, you could probably subroutine this out to save space in a tight program. 

keypadcheckloop();
keytone();
delay(50); //use a slower delay here to quicker advance numbers when holding in a button
//test the keypad results
if (keypadtotal == 10) {
  delay(50);Serial.println("Up");happybuffer = happybuffer + 1; //up by one using a shorter delay to allow speeding. Adjust this to taste.
}

if (keypadtotal == 50) {
  delay(50);Serial.println("Down");happybuffer = happybuffer - 1; //down by one using a shorter delay to allow speeding
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");happy = happybuffer;acceptbeep();goto configmenu; //store the buffered value, and go back
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto configmenu; //just go back, we don't give a shit about the buffer
}

//here, before we show anything on the screen at the top of this loop, we want to check that the user hasn't selected a value out of the allowed range for this variable. Let's check that.
if (happybuffer >= happymax){
  happybuffer = happymax;limittone();
}
//here, before we show anything on the screen at the top of this loop, we want to check that the user hasn't selected a value out of the allowed range for this variable. Let's check that.
if (happybuffer <= happymin){
  happybuffer = happymin;limittone();
}




goto happycore;




//LAZY CODER TIP. If you can't be bothered rewriting similar code for similar features, like the happy / intensity menu we're doing here, then name your variables smartly at the top.
// You'll notice I've been very uniform on happyness variables. Such as happy, happybuffer, happymax and happymin.... Have a close look at this. I copied the happiness config code, pasted it into notepad, 
// then I did a find/replace on any mention of happy, replaced happy with intenst, et voila. The only change I need to make is what menu we go back to. It's not configmenu, it is configmenuintens.
intensmenu:
Serial.println("entering intens config");
intensbuffer = intens;

intenscore:
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("Intens: "); // First line of LCD
lcd.setCursor(8, 0);lcd.print(intensbuffer); //let's add the value
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("OK    <>    BACK"); // Second line of LCD - By this stage, if you're using OK <> Back a lot, you could probably subroutine this out to save space in a tight program. 

keypadcheckloop();
keytone();
delay(50); //use a slower delay here to quicker advance numbers when holding in a button
//test the keypad results
if (keypadtotal == 10) {
  delay(50);Serial.println("Up");intensbuffer = intensbuffer + 1; //up by one using a shorter delay to allow speeding. Adjust this to taste.
}

if (keypadtotal == 50) {
  delay(50);Serial.println("Down");intensbuffer = intensbuffer - 1; //down by one using a shorter delay to allow speeding
}

if (keypadtotal == 100) {
  delay(200);Serial.println("OK");intens = intensbuffer;acceptbeep();goto configmenuintens; //store the buffered value, and go back
}

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");goto configmenuintens; //just go back, we don't give a shit about the buffer
}

//here, before we show anything on the screen at the top of this loop, we want to check that the user hasn't selected a value out of the allowed range for this variable. Let's check that.
if (intensbuffer >= intensmax){
  intensbuffer = intensmax;limittone();
}
//here, before we show anything on the screen at the top of this loop, we want to check that the user hasn't selected a value out of the allowed range for this variable. Let's check that.
if (intensbuffer <= intensmin){
  intensbuffer = intensmin;limittone();
}




goto intenscore;






//some demos for LED / chiptunes

ledflasher:
//In this little section, we're not going to give much thoroughfare in any menus. We just flash the LED, and give the user only the option to go back
Serial.println("blinking LED");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("LED is flashing!"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("            EXIT"); // Second line of LCD

ledflashercore: //Once the screen is drawn, we don't want to keep drawing it making it flicker while we run our own loop.
blinkLED(9, 100); //Do the thing that we're wanting to do here, everything else watches display and kb

keypadcheckonce();


//test the keypad results

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");keytone();delay(50);goto mainmenuled; // you'll note we've moved the beep / debounce timer here. Better for user experience. 
}

goto ledflashercore;











chiptunedemo:
//In this little section, we're not going to give much thoroughfare in any menus. We just flash the LED, and give the user only the option to go back
Serial.println("playing a chiptune");
lcd.clear();
lcd.setCursor(0, 0); // Set cursor at position zero(0) on first line of 1602 LCD
lcd.print("     Noisy!"); // First line of LCD
lcd.setCursor(0, 1); // Set cursor at position zero (0) on second line of 1602 LCD
lcd.print("            EXIT"); // Second line of LCD

chiptunedemocore: //Once the screen is drawn, we don't want to keep drawing it making it flicker while we run our own loop.
failtoneA();
fancytoneA();

keypadcheckonce();


//test the keypad results

if (keypadtotal == 200) {
  delay(200);Serial.println("Exit");keytone();delay(50);goto mainmenuchiptune; // you'll note we've moved the beep / debounce timer here. Better for user experience. 
}

goto chiptunedemocore;




}















//Some of my subroutines


//4buttonscan subroutines that get added below just outside of void loop to get things running. 
void keypadcheckloop(){ //This halts program procession until a button is pressed
do
{
//reset keypad total
keypadtotal =0;
//check the buttons, and don't return to void loop until we have a keypress.
buttonAstate = digitalRead(buttonA);
if (buttonAstate!=0){
  keypadtotal = keypadtotal + 10;
}
buttonBstate = digitalRead(buttonB);
if (buttonBstate!=0){
  keypadtotal = keypadtotal + 50;
}
buttonCstate = digitalRead(buttonC);
if (buttonCstate!=0){
  keypadtotal = keypadtotal + 100;
}
buttonDstate = digitalRead(buttonD);
if (buttonDstate!=0){
  keypadtotal = keypadtotal + 200;
}
} while (keypadtotal < 10);
}




void keypadcheckonce(){ // This checks the buttons once, quickly, but lets you get on with other stuff, like cycling colours on an LED strip. You repeatedly call this one in your own loop!
//reset keypad total
keypadtotal =0;
//check the keypad once and return control to void loop
buttonAstate = digitalRead(buttonA);
if (buttonAstate!=0){
  keypadtotal = keypadtotal + 10;
}
buttonBstate = digitalRead(buttonB);
if (buttonBstate!=0){
  keypadtotal = keypadtotal + 50;
}
buttonCstate = digitalRead(buttonC);
if (buttonCstate!=0){
  keypadtotal = keypadtotal + 100;
}
buttonDstate = digitalRead(buttonD);
if (buttonDstate!=0){
  keypadtotal = keypadtotal + 200;
}
}



//A nice, short triple beep on the buzzer used for showing success
void acceptbeep()
{
  digitalWrite(buzzer, HIGH); // Power the buzzer
  delay(50); // Keep the buzzer on for this long
  digitalWrite(buzzer, LOW); // Shut the buzzer up.
  delay(30); // Keep the buzzer on for this long
  digitalWrite(buzzer, HIGH); // Power the buzzer
  delay(50); // Keep the buzzer on for this long
  digitalWrite(buzzer, LOW); // Shut the buzzer up.
  delay(30); // Keep the buzzer on for this long
  digitalWrite(buzzer, HIGH); // Power the buzzer
  delay(50); // Keep the buzzer on for this long
  digitalWrite(buzzer, LOW); // Shut the buzzer up.
}



// A satisfying beep on keypresses for the speaker
void keytone()
{
  tone(tonePin, 784, 100);
}

//a tone to indicate end of range
void limittone()
{
  tone(tonePin, 2000, 200);
}



// A fancy tone #A
void fancytoneA()
{
  tone(tonePin, 300, 100);
  delay(50);
  tone(tonePin, 900, 100);
  delay(50);
  tone(tonePin, 1800, 100);
  delay(50);
  tone(tonePin, 3000, 100);
}

// A fail tone #A
void failtoneA()
{
  tone(tonePin, 3000, 100);
  delay(50);
  tone(tonePin, 1800, 100);
  delay(50);
  tone(tonePin, 900, 100);
  delay(50);
  tone(tonePin, 300, 100);
}





// blink the LED on the given pin for the duration in milliseconds
void blinkLED(int pin, int duration)
{
  digitalWrite(pin, HIGH); // turn LED on
  delay(duration);
  digitalWrite(pin, LOW); // turn LED off
  delay(duration);
}
